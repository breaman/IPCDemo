
/// <reference path="../coalesce.dependencies.d.ts" />

// Generated by IntelliTect.Coalesce

module ViewModels {
    
    export class RoleClaim extends Coalesce.BaseViewModel {
        public readonly modelName = "RoleClaim";
        public readonly primaryKeyName: keyof this = "id";
        public readonly modelDisplayName = "Role Claim";
        public readonly apiController = "/RoleClaim";
        public readonly viewController = "/RoleClaim";
        
        /** Configuration for all instances of RoleClaim. Can be overidden on each instance via instance.coalesceConfig. */
        public static coalesceConfig: Coalesce.ViewModelConfiguration<RoleClaim>
            = new Coalesce.ViewModelConfiguration<RoleClaim>(Coalesce.GlobalConfiguration.viewModel);
        
        /** Configuration for the current RoleClaim instance. */
        public coalesceConfig: Coalesce.ViewModelConfiguration<this>
            = new Coalesce.ViewModelConfiguration<RoleClaim>(RoleClaim.coalesceConfig);
        
        /** The namespace containing all possible values of this.dataSource. */
        public dataSources: typeof ListViewModels.RoleClaimDataSources = ListViewModels.RoleClaimDataSources;
        
        
        public roleId: KnockoutObservable<number | null> = ko.observable(null);
        public role: KnockoutObservable<ViewModels.Role | null> = ko.observable(null);
        public claimType: KnockoutObservable<string | null> = ko.observable(null);
        public claimValue: KnockoutObservable<string | null> = ko.observable(null);
        public id: KnockoutObservable<number | null> = ko.observable(null);
        
        
        /** Display text for Role */
        public roleText: KnockoutComputed<string>;
        
        
        
        
        /** Pops up a stock editor for object role */
        public showRoleEditor: (callback?: any) => void;
        
        
        
        /** 
            Load the ViewModel object from the DTO.
            @param data: The incoming data object to load.
            @param force: Will override the check against isLoading that is done to prevent recursion. False is default.
            @param allowCollectionDeletes: Set true when entire collections are loaded. True is the default. 
            In some cases only a partial collection is returned, set to false to only add/update collections.
        */
        public loadFromDto = (data: any, force: boolean = false, allowCollectionDeletes: boolean = true): void => {
            if (!data || (!force && this.isLoading())) return;
            this.isLoading(true);
            // Set the ID 
            this.myId = data.id;
            this.id(data.id);
            // Load the lists of other objects
            if (!data.role) { 
                if (data.roleId != this.roleId()) {
                    this.role(null);
                }
            } else {
                if (!this.role()){
                    this.role(new Role(data.role, this));
                } else {
                    this.role()!.loadFromDto(data.role);
                }
                if (this.parent instanceof Role && this.parent !== this.role() && this.parent.id() == this.role()!.id())
                {
                    this.parent.loadFromDto(data.role, undefined, false);
                }
            }
            
            // The rest of the objects are loaded now.
            this.roleId(data.roleId);
            this.claimType(data.claimType);
            this.claimValue(data.claimValue);
            if (this.coalesceConfig.onLoadFromDto()){
                this.coalesceConfig.onLoadFromDto()(this as any);
            }
            this.isLoading(false);
            this.isDirty(false);
            if (this.coalesceConfig.validateOnLoadFromDto()) this.validate();
        };
        
        /** Saves this object into a data transfer object to send to the server. */
        public saveToDto = (): any => {
            var dto: any = {};
            dto.id = this.id();
            
            dto.roleId = this.roleId();
            if (!dto.roleId && this.role()) {
                dto.roleId = this.role()!.id();
            }
            dto.claimType = this.claimType();
            dto.claimValue = this.claimValue();
            
            return dto;
        }
        
        /** 
            Loads any child objects that have an ID set, but not the full object.
            This is useful when creating an object that has a parent object and the ID is set on the new child.
        */
        public loadChildren = (callback?: () => void): void => {
            var loadingCount = 0;
            // See if this.role needs to be loaded.
            if (this.role() == null && this.roleId() != null) {
                loadingCount++;
                var roleObj = new Role();
                roleObj.load(this.roleId(), () => {
                    loadingCount--;
                    this.role(roleObj);
                    if (loadingCount == 0 && typeof(callback) == "function") { callback(); }
                });
            }
            if (loadingCount == 0 && typeof(callback) == "function") { callback(); }
        };
        
        public setupValidation(): void {
            if (this.errors !== null) return;
            this.errors = ko.validation.group([
                this.roleId.extend({ required: {params: true, message: "Role is required."} }),
            ]);
            this.warnings = ko.validation.group([
            ]);
        }
        
        constructor(newItem?: object, parent?: Coalesce.BaseViewModel | ListViewModels.RoleClaimList) {
            super(parent);
            this.baseInitialize();
            const self = this;
            
            this.roleText = ko.pureComputed(function() {
                if (self.role() && self.role()!.name()) {
                    return self.role()!.name()!.toString();
                } else {
                    return "None";
                }
            });
            
            
            
            
            this.showRoleEditor = function(callback: any) {
                if (!self.role()) {
                    self.role(new Role());
                }
                self.role()!.showEditor(callback)
            };
            
            self.roleId.subscribe(self.autoSave);
            self.role.subscribe(self.autoSave);
            self.claimType.subscribe(self.autoSave);
            self.claimValue.subscribe(self.autoSave);
            
            if (newItem) {
                self.loadFromDto(newItem, true);
            }
        }
    }
    
    export namespace RoleClaim {
    }
}
