
/// <reference path="../coalesce.dependencies.d.ts" />

// Generated by IntelliTect.Coalesce

module ViewModels {
    
    export class Role extends Coalesce.BaseViewModel {
        public readonly modelName = "Role";
        public readonly primaryKeyName: keyof this = "id";
        public readonly modelDisplayName = "Role";
        public readonly apiController = "/Role";
        public readonly viewController = "/Role";
        
        /** Configuration for all instances of Role. Can be overidden on each instance via instance.coalesceConfig. */
        public static coalesceConfig: Coalesce.ViewModelConfiguration<Role>
            = new Coalesce.ViewModelConfiguration<Role>(Coalesce.GlobalConfiguration.viewModel);
        
        /** Configuration for the current Role instance. */
        public coalesceConfig: Coalesce.ViewModelConfiguration<this>
            = new Coalesce.ViewModelConfiguration<Role>(Role.coalesceConfig);
        
        /** The namespace containing all possible values of this.dataSource. */
        public dataSources: typeof ListViewModels.RoleDataSources = ListViewModels.RoleDataSources;
        
        
        public name: KnockoutObservable<string | null> = ko.observable(null);
        public claims: KnockoutObservableArray<ViewModels.RoleClaim> = ko.observableArray([]);
        public users: KnockoutObservableArray<ViewModels.User> = ko.observableArray([]);
        public id: KnockoutObservable<number | null> = ko.observable(null);
        
        
        
        /** Add object to claims */
        public addToClaims = (autoSave?: boolean | null): RoleClaim => {
            var newItem = new RoleClaim();
            if (typeof(autoSave) == 'boolean'){
                newItem.coalesceConfig.autoSaveEnabled(autoSave);
            }
            newItem.parent = this;
            newItem.parentCollection = this.claims;
            newItem.isExpanded(true);
            newItem.roleId(this.id());
            this.claims.push(newItem);
            return newItem;
        };
        
        /** ListViewModel for Claims. Allows for loading subsets of data. */
        public claimsList: (loadImmediate?: boolean) => ListViewModels.RoleClaimList;
        
        
        /** Url for a table view of all members of collection Claims for the current object. */
        public claimsListUrl: KnockoutComputed<string> = ko.computed(
            () => this.coalesceConfig.baseViewUrl() + '/RoleClaim/Table?filter.roleId=' + this.id(),
            null, { deferEvaluation: true }
        );
        
        
        
        
        /** 
            Load the ViewModel object from the DTO.
            @param data: The incoming data object to load.
            @param force: Will override the check against isLoading that is done to prevent recursion. False is default.
            @param allowCollectionDeletes: Set true when entire collections are loaded. True is the default. 
            In some cases only a partial collection is returned, set to false to only add/update collections.
        */
        public loadFromDto = (data: any, force: boolean = false, allowCollectionDeletes: boolean = true): void => {
            if (!data || (!force && this.isLoading())) return;
            this.isLoading(true);
            // Set the ID 
            this.myId = data.id;
            this.id(data.id);
            // Load the lists of other objects
            if (data.claims != null) {
                // Merge the incoming array
                Coalesce.KnockoutUtilities.RebuildArray(this.claims, data.claims, 'id', RoleClaim, this, allowCollectionDeletes);
            }
            if (data.users != null) {
                // Merge the incoming array
                Coalesce.KnockoutUtilities.RebuildArray(this.users, data.users, 'id', User, this, allowCollectionDeletes);
            }
            
            // The rest of the objects are loaded now.
            this.name(data.name);
            if (this.coalesceConfig.onLoadFromDto()){
                this.coalesceConfig.onLoadFromDto()(this as any);
            }
            this.isLoading(false);
            this.isDirty(false);
            if (this.coalesceConfig.validateOnLoadFromDto()) this.validate();
        };
        
        /** Saves this object into a data transfer object to send to the server. */
        public saveToDto = (): any => {
            var dto: any = {};
            dto.id = this.id();
            
            dto.name = this.name();
            
            return dto;
        }
        
        /** 
            Loads any child objects that have an ID set, but not the full object.
            This is useful when creating an object that has a parent object and the ID is set on the new child.
        */
        public loadChildren = (callback?: () => void): void => {
            var loadingCount = 0;
            if (loadingCount == 0 && typeof(callback) == "function") { callback(); }
        };
        
        public setupValidation(): void {
            if (this.errors !== null) return;
            this.errors = ko.validation.group([
            ]);
            this.warnings = ko.validation.group([
            ]);
        }
        
        constructor(newItem?: object, parent?: Coalesce.BaseViewModel | ListViewModels.RoleList) {
            super(parent);
            this.baseInitialize();
            const self = this;
            
            
            
            // List Object model for Claims. Allows for loading subsets of data.
            var _claimsList: ListViewModels.RoleClaimList;
            this.claimsList = function(loadImmediate = true) {
                if (!_claimsList) {
                    _claimsList = new ListViewModels.RoleClaimList();
                    if (loadImmediate) loadClaimsList();
                    self.id.subscribe(loadClaimsList)
                }
                return _claimsList;
            }
            function loadClaimsList() {
                if (self.id()) {
                    _claimsList.queryString = "filter.RoleId=" + self.id();
                    _claimsList.load();
                }
            }
            
            
            
            self.name.subscribe(self.autoSave);
            
            if (newItem) {
                self.loadFromDto(newItem, true);
            }
        }
    }
    
    export namespace Role {
    }
}
