
/// <reference path="../coalesce.dependencies.d.ts" />

// Generated by IntelliTect.Coalesce

module ListViewModels {
    
    export namespace UserDataSources {
        export class Default extends Coalesce.DataSource<ViewModels.User> { }
        export class FetchUsersForApplication extends Coalesce.DataSource<ViewModels.User> {
            public applicationName: KnockoutObservable<string | null> = ko.observable(null);
            public saveToDto = () => {
                var dto: any = {};
                dto.applicationName = this.applicationName();
                return dto;
            }
        }
        export class FetchUsersForManagement extends Coalesce.DataSource<ViewModels.User> {
        }
    }
    
    export class UserList extends Coalesce.BaseListViewModel<ViewModels.User> {
        public readonly modelName: string = "User";
        public readonly apiController: string = "/User";
        public modelKeyName: string = "id";
        public itemClass: new () => ViewModels.User = ViewModels.User;
        
        public filter: {
            firstName?: string;
            lastName?: string;
            emailAddress?: string;
            emailConfirmed?: string;
            phoneNumber?: string;
            phoneNumberConfirmed?: string;
            twoFactorEnabled?: string;
            accessFailedCount?: string;
            lockoutEnd?: string;
            accountLocked?: string;
            passwordHash?: string;
            id?: string;
        } | null = null;
        
        /** The namespace containing all possible values of this.dataSource. */
        public dataSources: typeof UserDataSources = UserDataSources;
        
        /** The data source on the server to use when retrieving objects. Valid values are in this.dataSources. */
        public dataSource: Coalesce.DataSource<ViewModels.User> = new this.dataSources.Default();
        
        /** Configuration for all instances of UserList. Can be overidden on each instance via instance.coalesceConfig. */
        public static coalesceConfig = new Coalesce.ListViewModelConfiguration<UserList, ViewModels.User>(Coalesce.GlobalConfiguration.listViewModel);
        
        /** Configuration for this UserList instance. */
        public coalesceConfig: Coalesce.ListViewModelConfiguration<UserList, ViewModels.User>
            = new Coalesce.ListViewModelConfiguration<UserList, ViewModels.User>(UserList.coalesceConfig);
        
        
        protected createItem = (newItem?: any, parent?: any) => new ViewModels.User(newItem, parent);
        
        constructor() {
            super();
        }
    }
}
