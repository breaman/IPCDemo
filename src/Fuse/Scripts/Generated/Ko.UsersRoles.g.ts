
/// <reference path="../coalesce.dependencies.d.ts" />

// Generated by IntelliTect.Coalesce

module ViewModels {
    
    export class UsersRoles extends Coalesce.BaseViewModel {
        public readonly modelName = "UsersRoles";
        public readonly primaryKeyName: keyof this = "userId";
        public readonly modelDisplayName = "Users Roles";
        public readonly apiController = "/UsersRoles";
        public readonly viewController = "/UsersRoles";
        
        /** Configuration for all instances of UsersRoles. Can be overidden on each instance via instance.coalesceConfig. */
        public static coalesceConfig: Coalesce.ViewModelConfiguration<UsersRoles>
            = new Coalesce.ViewModelConfiguration<UsersRoles>(Coalesce.GlobalConfiguration.viewModel);
        
        /** Configuration for the current UsersRoles instance. */
        public coalesceConfig: Coalesce.ViewModelConfiguration<this>
            = new Coalesce.ViewModelConfiguration<UsersRoles>(UsersRoles.coalesceConfig);
        
        /** The namespace containing all possible values of this.dataSource. */
        public dataSources: typeof ListViewModels.UsersRolesDataSources = ListViewModels.UsersRolesDataSources;
        
        
        public userId: KnockoutObservable<number | null> = ko.observable(null);
        public roleId: KnockoutObservable<number | null> = ko.observable(null);
        
        
        
        
        
        
        
        /** 
            Load the ViewModel object from the DTO.
            @param data: The incoming data object to load.
            @param force: Will override the check against isLoading that is done to prevent recursion. False is default.
            @param allowCollectionDeletes: Set true when entire collections are loaded. True is the default. 
            In some cases only a partial collection is returned, set to false to only add/update collections.
        */
        public loadFromDto = (data: any, force: boolean = false, allowCollectionDeletes: boolean = true): void => {
            if (!data || (!force && this.isLoading())) return;
            this.isLoading(true);
            // Set the ID 
            this.myId = data.userId;
            this.userId(data.userId);
            // Load the lists of other objects
            
            // The rest of the objects are loaded now.
            if (this.coalesceConfig.onLoadFromDto()){
                this.coalesceConfig.onLoadFromDto()(this as any);
            }
            this.isLoading(false);
            this.isDirty(false);
            if (this.coalesceConfig.validateOnLoadFromDto()) this.validate();
        };
        
        /** Saves this object into a data transfer object to send to the server. */
        public saveToDto = (): any => {
            var dto: any = {};
            dto.userId = this.userId();
            
            
            return dto;
        }
        
        /** 
            Loads any child objects that have an ID set, but not the full object.
            This is useful when creating an object that has a parent object and the ID is set on the new child.
        */
        public loadChildren = (callback?: () => void): void => {
            var loadingCount = 0;
            if (loadingCount == 0 && typeof(callback) == "function") { callback(); }
        };
        
        public setupValidation(): void {
            if (this.errors !== null) return;
            this.errors = ko.validation.group([
            ]);
            this.warnings = ko.validation.group([
            ]);
        }
        
        constructor(newItem?: object, parent?: Coalesce.BaseViewModel | ListViewModels.UsersRolesList) {
            super(parent);
            this.baseInitialize();
            const self = this;
            
            
            
            
            
            
            
            if (newItem) {
                self.loadFromDto(newItem, true);
            }
        }
    }
    
    export namespace UsersRoles {
    }
}
