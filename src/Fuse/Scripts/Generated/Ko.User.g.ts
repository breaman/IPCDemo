
/// <reference path="../coalesce.dependencies.d.ts" />

// Generated by IntelliTect.Coalesce

module ViewModels {
    
    export class User extends Coalesce.BaseViewModel {
        public readonly modelName = "User";
        public readonly primaryKeyName: keyof this = "id";
        public readonly modelDisplayName = "User";
        public readonly apiController = "/User";
        public readonly viewController = "/User";
        
        /** Configuration for all instances of User. Can be overidden on each instance via instance.coalesceConfig. */
        public static coalesceConfig: Coalesce.ViewModelConfiguration<User>
            = new Coalesce.ViewModelConfiguration<User>(Coalesce.GlobalConfiguration.viewModel);
        
        /** Configuration for the current User instance. */
        public coalesceConfig: Coalesce.ViewModelConfiguration<this>
            = new Coalesce.ViewModelConfiguration<User>(User.coalesceConfig);
        
        /** The namespace containing all possible values of this.dataSource. */
        public dataSources: typeof ListViewModels.UserDataSources = ListViewModels.UserDataSources;
        
        
        public firstName: KnockoutObservable<string | null> = ko.observable(null);
        public lastName: KnockoutObservable<string | null> = ko.observable(null);
        public emailAddress: KnockoutObservable<string | null> = ko.observable(null);
        public emailConfirmed: KnockoutObservable<boolean | null> = ko.observable(null);
        public phoneNumber: KnockoutObservable<string | null> = ko.observable(null);
        public phoneNumberConfirmed: KnockoutObservable<boolean | null> = ko.observable(null);
        public twoFactorEnabled: KnockoutObservable<boolean | null> = ko.observable(null);
        public accessFailedCount: KnockoutObservable<number | null> = ko.observable(null);
        public lockoutEnd: KnockoutObservable<moment.Moment | null> = ko.observable(null);
        public accountLocked: KnockoutObservable<boolean | null> = ko.observable(null);
        public passwordHash: KnockoutObservable<string | null> = ko.observable(null);
        public claims: KnockoutObservableArray<ViewModels.UserClaim> = ko.observableArray([]);
        public id: KnockoutObservable<number | null> = ko.observable(null);
        
        
        
        /** Add object to claims */
        public addToClaims = (autoSave?: boolean | null): UserClaim => {
            var newItem = new UserClaim();
            if (typeof(autoSave) == 'boolean'){
                newItem.coalesceConfig.autoSaveEnabled(autoSave);
            }
            newItem.parent = this;
            newItem.parentCollection = this.claims;
            newItem.isExpanded(true);
            newItem.userId(this.id());
            this.claims.push(newItem);
            return newItem;
        };
        
        /** ListViewModel for Claims. Allows for loading subsets of data. */
        public claimsList: (loadImmediate?: boolean) => ListViewModels.UserClaimList;
        
        
        /** Url for a table view of all members of collection Claims for the current object. */
        public claimsListUrl: KnockoutComputed<string> = ko.computed(
            () => this.coalesceConfig.baseViewUrl() + '/UserClaim/Table?filter.userId=' + this.id(),
            null, { deferEvaluation: true }
        );
        
        
        
        
        /** 
            Load the ViewModel object from the DTO.
            @param data: The incoming data object to load.
            @param force: Will override the check against isLoading that is done to prevent recursion. False is default.
            @param allowCollectionDeletes: Set true when entire collections are loaded. True is the default. 
            In some cases only a partial collection is returned, set to false to only add/update collections.
        */
        public loadFromDto = (data: any, force: boolean = false, allowCollectionDeletes: boolean = true): void => {
            if (!data || (!force && this.isLoading())) return;
            this.isLoading(true);
            // Set the ID 
            this.myId = data.id;
            this.id(data.id);
            // Load the lists of other objects
            if (data.claims != null) {
                // Merge the incoming array
                Coalesce.KnockoutUtilities.RebuildArray(this.claims, data.claims, 'id', UserClaim, this, allowCollectionDeletes);
            }
            
            // The rest of the objects are loaded now.
            this.firstName(data.firstName);
            this.lastName(data.lastName);
            this.emailAddress(data.emailAddress);
            this.emailConfirmed(data.emailConfirmed);
            this.phoneNumber(data.phoneNumber);
            this.phoneNumberConfirmed(data.phoneNumberConfirmed);
            this.twoFactorEnabled(data.twoFactorEnabled);
            this.accessFailedCount(data.accessFailedCount);
            if (data.lockoutEnd == null) this.lockoutEnd(null);
            else if (this.lockoutEnd() == null || this.lockoutEnd()!.valueOf() != new Date(data.lockoutEnd).getTime()){
                this.lockoutEnd(moment(new Date(data.lockoutEnd)));
            }
            this.accountLocked(data.accountLocked);
            this.passwordHash(data.passwordHash);
            if (this.coalesceConfig.onLoadFromDto()){
                this.coalesceConfig.onLoadFromDto()(this as any);
            }
            this.isLoading(false);
            this.isDirty(false);
            if (this.coalesceConfig.validateOnLoadFromDto()) this.validate();
        };
        
        /** Saves this object into a data transfer object to send to the server. */
        public saveToDto = (): any => {
            var dto: any = {};
            dto.id = this.id();
            
            dto.firstName = this.firstName();
            dto.lastName = this.lastName();
            dto.emailAddress = this.emailAddress();
            dto.emailConfirmed = this.emailConfirmed();
            dto.phoneNumber = this.phoneNumber();
            dto.phoneNumberConfirmed = this.phoneNumberConfirmed();
            dto.twoFactorEnabled = this.twoFactorEnabled();
            dto.accessFailedCount = this.accessFailedCount();
            if (!this.lockoutEnd()) dto.lockoutEnd = null;
            else dto.lockoutEnd = this.lockoutEnd()!.format('YYYY-MM-DDTHH:mm:ssZZ');
            dto.passwordHash = this.passwordHash();
            
            return dto;
        }
        
        /** 
            Loads any child objects that have an ID set, but not the full object.
            This is useful when creating an object that has a parent object and the ID is set on the new child.
        */
        public loadChildren = (callback?: () => void): void => {
            var loadingCount = 0;
            if (loadingCount == 0 && typeof(callback) == "function") { callback(); }
        };
        
        public setupValidation(): void {
            if (this.errors !== null) return;
            this.errors = ko.validation.group([
                this.lockoutEnd.extend({ moment: { unix: true } }),
            ]);
            this.warnings = ko.validation.group([
            ]);
        }
        
        constructor(newItem?: object, parent?: Coalesce.BaseViewModel | ListViewModels.UserList) {
            super(parent);
            this.baseInitialize();
            const self = this;
            
            
            
            // List Object model for Claims. Allows for loading subsets of data.
            var _claimsList: ListViewModels.UserClaimList;
            this.claimsList = function(loadImmediate = true) {
                if (!_claimsList) {
                    _claimsList = new ListViewModels.UserClaimList();
                    if (loadImmediate) loadClaimsList();
                    self.id.subscribe(loadClaimsList)
                }
                return _claimsList;
            }
            function loadClaimsList() {
                if (self.id()) {
                    _claimsList.queryString = "filter.UserId=" + self.id();
                    _claimsList.load();
                }
            }
            
            
            
            self.firstName.subscribe(self.autoSave);
            self.lastName.subscribe(self.autoSave);
            self.emailAddress.subscribe(self.autoSave);
            self.emailConfirmed.subscribe(self.autoSave);
            self.phoneNumber.subscribe(self.autoSave);
            self.phoneNumberConfirmed.subscribe(self.autoSave);
            self.twoFactorEnabled.subscribe(self.autoSave);
            self.accessFailedCount.subscribe(self.autoSave);
            self.lockoutEnd.subscribe(self.autoSave);
            self.passwordHash.subscribe(self.autoSave);
            
            if (newItem) {
                self.loadFromDto(newItem, true);
            }
        }
    }
    
    export namespace User {
    }
}
